/* CompilerParser.java */
/* Generated By:JavaCC: Do not edit this line. CompilerParser.java */
package machine;


import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;


public class CompilerParser implements CompilerParserConstants {

    private List<Number> byteCode = new ArrayList<>();
    private CodeSegment codeSegment = new CodeSegment();
    private DataSegment dataSegment = new DataSegment();

    public static void main(String[] args) throws ParseException {
        CompilerParser parser = new CompilerParser(System.in);
        parser.Program();
    }

  final public List<Number> Program() throws ParseException {
dataSegment.add(codeSegment.newLabel("begin"));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      GlobalVariableDeclaration();
      jj_consume_token(EOS);
    }
    jj_consume_token(BEGIN);
codeSegment.placeLabel("begin");
    StatementsOrBlocks();
    jj_consume_token(0);
byteCode.addAll(dataSegment);
        codeSegment.applyOffset( byteCode.size() );
        byteCode.addAll(codeSegment);
        {if ("" != null) return byteCode;}
    throw new Error("Missing return statement in function");
}

  final public void GlobalVariableDeclaration() throws ParseException {Token id, rvalue;
    jj_consume_token(VAR);
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      rvalue = jj_consume_token(NUMBER);
Number variable = dataSegment.newVariable(id.image, rvalue.image);
      break;
      }
    case IDENTIFIER:{
      rvalue = jj_consume_token(IDENTIFIER);
Number right  = dataSegment.getVariable(rvalue.image);
            Number variable = dataSegment.newVariable(id.image, right.getValue());
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void StatementsOrBlocks() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HALT:
      case NOP:
      case INC:
      case DEC:
      case JNZ:
      case VAR:
      case DO:
      case WHILE:
      case IF:
      case IDENTIFIER:
      case EOS:
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      StatementOrBlock();
    }
}

  final public void StatementOrBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HALT:
    case NOP:
    case INC:
    case DEC:
    case JNZ:
    case VAR:
    case DO:
    case WHILE:
    case IF:
    case EOS:
    case 23:{
      UnlabeledStatementOrBlock();
      break;
      }
    case IDENTIFIER:{
      label_3:
      while (true) {
        LabelDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
      UnlabeledStatementOrBlock();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void LabelDeclaration() throws ParseException {Token label;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
codeSegment.placeLabel(label.image);
}

  final public void UnlabeledStatementOrBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      Block();
      break;
      }
    case DO:{
      DoWhileBlock();
      break;
      }
    case WHILE:{
      WhileBlock();
      break;
      }
    case IF:{
      IfElseBlock();
      break;
      }
    case HALT:
    case NOP:
    case INC:
    case DEC:
    case JNZ:
    case VAR:
    case EOS:{
      Statement();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Block() throws ParseException {
    jj_consume_token(23);
    StatementsOrBlocks();
    jj_consume_token(24);
}

  final public void DoWhileBlock() throws ParseException {Number condition;
    Number target = codeSegment.newLabel();
    jj_consume_token(DO);
    jj_consume_token(23);
    StatementsOrBlocks();
    jj_consume_token(24);
    jj_consume_token(WHILE);
    jj_consume_token(25);
    condition = DoWhileCondition();
    jj_consume_token(26);
    jj_consume_token(EOS);
codeSegment.addJNZ(condition, target);
}

  final public void WhileBlock() throws ParseException {Number condition;
    Number begin = codeSegment.newLabel();
    Number end = codeSegment.newLabel();
    jj_consume_token(WHILE);
    jj_consume_token(25);
    condition = IfCondition();
    jj_consume_token(26);
codeSegment.addJNZ(condition, end);
    jj_consume_token(23);
    StatementsOrBlocks();
    jj_consume_token(24);
codeSegment.addJNZ(new Number(0), begin);
        codeSegment.placeLabel(end);
}

  final public void IfElseBlock() throws ParseException {Number condition;
    Number elseLabel = codeSegment.newLabel();
    Number endLabel = codeSegment.newLabel();
    boolean hasElse = false;
    jj_consume_token(IF);
    jj_consume_token(25);
    condition = IfCondition();
    jj_consume_token(26);
codeSegment.addJNZ(condition, elseLabel);
    jj_consume_token(23);
    StatementsOrBlocks();
    jj_consume_token(24);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
codeSegment.addJNZ(new Number(0), endLabel);
        codeSegment.placeLabel(elseLabel);
        hasElse = true;
      jj_consume_token(23);
      StatementsOrBlocks();
      jj_consume_token(24);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
codeSegment.placeLabel(endLabel);
if( !hasElse ) {
            codeSegment.placeLabel(elseLabel);
        }
}

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HALT:
    case NOP:
    case INC:
    case DEC:
    case JNZ:
    case VAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        LocalVariableDeclaration();
        break;
        }
      case HALT:
      case NOP:
      case INC:
      case DEC:
      case JNZ:{
        Command();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
}

  final public void LocalVariableDeclaration() throws ParseException {Token id, rvalue;
    jj_consume_token(VAR);
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      rvalue = jj_consume_token(NUMBER);
Number variable = dataSegment.newVariable(id.image, rvalue.image);
            codeSegment.addClear(variable);
            int value = Integer.parseInt(rvalue.image);
            for( int i = 0; i < value; ++i ) {
                codeSegment.addINC(variable);
            }
      break;
      }
    case IDENTIFIER:{
      rvalue = jj_consume_token(IDENTIFIER);
Number left   = dataSegment.newVariable(id.image, 0);
            Number middle = dataSegment.newVariable(0);
            Number right  = dataSegment.getVariable(rvalue.image);
            codeSegment.addClear(left);
            codeSegment.addClear(middle);
            codeSegment.addINC(right);
            Number cloneLoop = codeSegment.newLabel();
            codeSegment.addINC(left);
            codeSegment.addINC(middle);
            codeSegment.addDEC(right);
            codeSegment.addJNZ(right, cloneLoop);
            codeSegment.addDEC(left);
            Number restoreLoop = codeSegment.newLabel();
            codeSegment.addINC(right);
            codeSegment.addDEC(middle);
            codeSegment.addJNZ(middle, restoreLoop);
            codeSegment.addDEC(right);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Command() throws ParseException {Number arg1, arg2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HALT:{
      Halt();
      break;
      }
    case NOP:{
      Nop();
      break;
      }
    case INC:{
      Inc();
      break;
      }
    case DEC:{
      Dec();
      break;
      }
    case JNZ:{
      Jnz();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Number DoWhileCondition() throws ParseException {Number address;
    Token number;
    address = Lhs();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEQ:{
      jj_consume_token(NEQ);
      number = jj_consume_token(NUMBER);
int n = Integer.parseInt(number.image);
            if( n == 0 ) {
                {if ("" != null) return address;}
            } else {
                {if ("" != null) return address;}
            }
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      number = jj_consume_token(NUMBER);
Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            {if ("" != null) return flag;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number Lhs() throws ParseException {Token lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      lhs = jj_consume_token(IDENTIFIER);
{if ("" != null) return dataSegment.getVariable(lhs.image);}
      break;
      }
    case NUMBER:{
      lhs = jj_consume_token(NUMBER);
{if ("" != null) return dataSegment.newVariable(Integer.parseInt(lhs.image));}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number IfCondition() throws ParseException {Number address;
    Token number;
    Token constant;
    address = Lhs();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEQ:{
      jj_consume_token(NEQ);
      number = jj_consume_token(NUMBER);
Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            {if ("" != null) return flag;}
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      number = jj_consume_token(NUMBER);
{if ("" != null) return address;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number Variable() throws ParseException {Token id;
    id = jj_consume_token(IDENTIFIER);
{if ("" != null) return dataSegment.getVariable(id.image);}
    throw new Error("Missing return statement in function");
}

  final public void Halt() throws ParseException {
    jj_consume_token(HALT);
codeSegment.add(Number.HALT);
}

  final public void Nop() throws ParseException {
    jj_consume_token(NOP);
codeSegment.add(Number.NOP);
}

  final public void Inc() throws ParseException {Number arg1;
    jj_consume_token(INC);
    arg1 = Variable();
codeSegment.addINC(arg1);
}

  final public void Dec() throws ParseException {Number arg1;
    jj_consume_token(DEC);
    arg1 = Variable();
codeSegment.addDEC(arg1);
}

  final public void Jnz() throws ParseException {Number arg1;
    Token arg2;
    jj_consume_token(JNZ);
    arg1 = Variable();
    arg2 = jj_consume_token(IDENTIFIER);
Number target = codeSegment.getLabel(arg2.image);
        codeSegment.addJNZ(arg1, target);
}

  /** Generated Token Manager. */
  public CompilerParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x30000,0xa177e0,0x10000,0xa177e0,0xa077e0,0x8000,0x7e0,0x7e0,0x30000,0x3e0,0xc0000,0x30000,0xc0000,};
	}

  /** Constructor with InputStream. */
  public CompilerParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompilerParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompilerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompilerParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompilerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompilerParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompilerParser(CompilerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[27];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 14; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 27; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
