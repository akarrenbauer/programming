/* CompilerParser.java */
/* Generated By:JavaCC: Do not edit this line. CompilerParser.java */
package machine;


import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;


public class CompilerParser implements CompilerParserConstants {

    private boolean preflight = false;

    private List<Number> byteCode = new ArrayList<>();
    private CodeSegment codeSegment = new CodeSegment();
    private DataSegment dataSegment = new DataSegment();

    private List<String> macroVariables = new ArrayList<>();

    public static void main(String[] args) throws ParseException {
        CompilerParser parser = new CompilerParser(System.in);
        parser.Program(false);
    }

    String getImage( Token t ) {
        StringBuilder sb = new StringBuilder();
        for( Token tt = t; tt != null; tt = tt.next ) {
            sb.append(tt.image);
        }
        return sb.toString();
    }

  final public List<Number> Program(boolean preflight) throws ParseException {
this.preflight = preflight;
        dataSegment.add(codeSegment.newLabel("begin"));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      MacroDefinition();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      GlobalVariableDeclaration();
      jj_consume_token(EOS);
    }
    jj_consume_token(BEGIN);
codeSegment.placeLabel("begin");
    StatementsOrBlocks();
    jj_consume_token(0);
byteCode.addAll(dataSegment);
        codeSegment.applyOffset( byteCode.size() );
        byteCode.addAll(codeSegment);
        {if ("" != null) return byteCode;}
    throw new Error("Missing return statement in function");
}

  final public void MacroDefinition() throws ParseException {
    jj_consume_token(VOID);
    MacroSignature();
    jj_consume_token(24);
    StatementsOrBlocks();
    jj_consume_token(25);
macroVariables.clear();
}

  final public void GlobalVariableDeclaration() throws ParseException {Token id, rvalue, size, index;
    int length = 1;
    int offset = 0;
    jj_consume_token(VAR);
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      jj_consume_token(26);
      size = jj_consume_token(NUMBER);
      jj_consume_token(27);
length = Integer.parseInt(size.image);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      rvalue = jj_consume_token(NUMBER);
Number variable = dataSegment.newVariable(id.image, length, rvalue.image);
      break;
      }
    case IDENTIFIER:{
      rvalue = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 26:{
        jj_consume_token(26);
        index = jj_consume_token(NUMBER);
        jj_consume_token(27);
offset = Integer.parseInt(index.image);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
Number right  = dataSegment.getVariable(rvalue.image, offset);
            if( right == null ) {
                {if (true) throw new ParseException("Unknown variable " + rvalue.image + " in line " + rvalue.beginLine );}
            }
            Number variable = dataSegment.newVariable(id.image, length, right.getValue());
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void StatementsOrBlocks() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HALT:
      case NOP:
      case INC:
      case DEC:
      case JNZ:
      case VAR:
      case DO:
      case WHILE:
      case IF:
      case IDENTIFIER:
      case EOS:
      case 24:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      StatementOrBlock();
    }
}

  final public void StatementOrBlock() throws ParseException {
    if (jj_2_2(2)) {
      UnlabeledStatementOrBlock();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        label_4:
        while (true) {
          LabelDeclaration();
          if (jj_2_1(2)) {
            ;
          } else {
            break label_4;
          }
        }
        UnlabeledStatementOrBlock();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void LabelDeclaration() throws ParseException {Token label;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
codeSegment.placeLabel(label.image);
}

  final public void UnlabeledStatementOrBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 24:{
      Block();
      break;
      }
    case DO:{
      DoWhileBlock();
      break;
      }
    case WHILE:{
      WhileBlock();
      break;
      }
    case IF:{
      IfElseBlock();
      break;
      }
    case HALT:
    case NOP:
    case INC:
    case DEC:
    case JNZ:
    case VAR:
    case IDENTIFIER:
    case EOS:{
      Statement();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Block() throws ParseException {
    jj_consume_token(24);
    StatementsOrBlocks();
    jj_consume_token(25);
}

  final public void DoWhileBlock() throws ParseException {Number condition;
    Number target = codeSegment.newLabel();
    jj_consume_token(DO);
    jj_consume_token(24);
    StatementsOrBlocks();
    jj_consume_token(25);
    jj_consume_token(WHILE);
    jj_consume_token(28);
    condition = DoWhileCondition();
    jj_consume_token(29);
    jj_consume_token(EOS);
codeSegment.addJNZ(condition, target);
}

  final public void WhileBlock() throws ParseException {Number condition;
    Number begin = codeSegment.newLabel();
    Number end = codeSegment.newLabel();
    jj_consume_token(WHILE);
    jj_consume_token(28);
    condition = IfCondition();
    jj_consume_token(29);
codeSegment.addJNZ(condition, end);
    jj_consume_token(24);
    StatementsOrBlocks();
    jj_consume_token(25);
codeSegment.addJNZ(new Number(0), begin);
        codeSegment.placeLabel(end);
}

  final public void IfElseBlock() throws ParseException {Number condition;
    Number elseLabel = codeSegment.newLabel();
    Number endLabel = codeSegment.newLabel();
    boolean hasElse = false;
    jj_consume_token(IF);
    jj_consume_token(28);
    condition = IfCondition();
    jj_consume_token(29);
codeSegment.addJNZ(condition, elseLabel);
    jj_consume_token(24);
    StatementsOrBlocks();
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
codeSegment.addJNZ(new Number(0), endLabel);
        codeSegment.placeLabel(elseLabel);
        hasElse = true;
      jj_consume_token(24);
      StatementsOrBlocks();
      jj_consume_token(25);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
codeSegment.placeLabel(endLabel);
if( !hasElse ) {
            codeSegment.placeLabel(elseLabel);
        }
}

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HALT:
    case NOP:
    case INC:
    case DEC:
    case JNZ:
    case VAR:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        LocalVariableDeclaration();
        break;
        }
      case HALT:
      case NOP:
      case INC:
      case DEC:
      case JNZ:{
        Command();
        break;
        }
      case IDENTIFIER:{
        Macro();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
}

  final public void MacroSignature() throws ParseException {Token name;
    Token id;
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(28);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case NUMBER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case IDENTIFIER:{
        id = jj_consume_token(IDENTIFIER);
macroVariables.add(id.image);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case IDENTIFIER:{
        id = jj_consume_token(IDENTIFIER);
macroVariables.add(id.image);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(29);
if( !preflight ) {
            {if (true) throw new ParseException( "Macro substitution failed!\n" + getImage(name));}
        }
}

  final public void Macro() throws ParseException {Token name;
    Token id;
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(28);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case NUMBER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case IDENTIFIER:{
        id = jj_consume_token(IDENTIFIER);
if( dataSegment.getVariable(id.image) == null && !macroVariables.contains(id.image) ) {if (true) throw new ParseException("Unknown variable " + id.image + " in line " + id.beginLine );}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 26:{
          jj_consume_token(26);
          jj_consume_token(NUMBER);
          jj_consume_token(27);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case IDENTIFIER:{
        id = jj_consume_token(IDENTIFIER);
if( dataSegment.getVariable(id.image) == null && !macroVariables.contains(id.image) ) {if (true) throw new ParseException("Unknown variable " + id.image + " in line " + id.beginLine );}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 26:{
          jj_consume_token(26);
          jj_consume_token(NUMBER);
          jj_consume_token(27);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(29);
if( !preflight ) {
                {if (true) throw new ParseException( "Macro substitution failed!\n" + getImage(name));}
            }
}

  final public void LocalVariableDeclaration() throws ParseException {Token id, rvalue, size, index;
    int length = 1;
    int offset = 0;
    jj_consume_token(VAR);
    id = jj_consume_token(IDENTIFIER);
macroVariables.add(id.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      jj_consume_token(26);
      size = jj_consume_token(NUMBER);
      jj_consume_token(27);
length = Integer.parseInt(size.image);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      rvalue = jj_consume_token(NUMBER);
if( !preflight ) {
                Number base = dataSegment.newVariable(id.image, length, rvalue.image);
                int value = Integer.parseInt(rvalue.image);
                for( int j = 0; j < length; ++j ) {
                    Number variable = base.offset(j);
                    codeSegment.addClear(variable);
                    for( int i = 0; i < value; ++i ) {
                        codeSegment.addINC(variable);
                    }
                }
            }
      break;
      }
    case IDENTIFIER:{
      rvalue = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 26:{
        jj_consume_token(26);
        index = jj_consume_token(NUMBER);
        jj_consume_token(27);
offset = Integer.parseInt(index.image);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
if( !preflight ) {
                Number left   = dataSegment.newVariable(id.image, length, 0);
                Number middle = dataSegment.newVariable(0);
                Number right  = dataSegment.getVariable(rvalue.image, offset);
                if( right == null ) {
                    if( !macroVariables.contains(rvalue.image) ) {
                        {if (true) throw new ParseException("Unknown variable " + rvalue.image + " in line " + rvalue.beginLine );}
                    } else {
                        right = new Number(0);
                    }
                }
                for( int j = 0; j < length; ++j ) {
                    codeSegment.addClear(left.offset(j));
                    codeSegment.addClear(middle);
                    codeSegment.addINC(right);
                    Number cloneLoop = codeSegment.newLabel();
                    codeSegment.addINC(left.offset(j));
                    codeSegment.addINC(middle);
                    codeSegment.addDEC(right);
                    codeSegment.addJNZ(right, cloneLoop);
                    codeSegment.addDEC(left.offset(j));
                    Number restoreLoop = codeSegment.newLabel();
                    codeSegment.addINC(right);
                    codeSegment.addDEC(middle);
                    codeSegment.addJNZ(middle, restoreLoop);
                    codeSegment.addDEC(right);
                }
            }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Command() throws ParseException {Number arg1, arg2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HALT:{
      Halt();
      break;
      }
    case NOP:{
      Nop();
      break;
      }
    case INC:{
      Inc();
      break;
      }
    case DEC:{
      Dec();
      break;
      }
    case JNZ:{
      Jnz();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Number DoWhileCondition() throws ParseException {Number address;
    Token number;
    address = Lhs();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEQ:{
      jj_consume_token(NEQ);
      number = jj_consume_token(NUMBER);
int n = Integer.parseInt(number.image);
            if( n == 0 ) {
                {if ("" != null) return address;}
            } else {
                {if ("" != null) return address;}
            }
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      number = jj_consume_token(NUMBER);
Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            {if ("" != null) return flag;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number Lhs() throws ParseException {Token lhs, index;
    int offset = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      lhs = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 26:{
        jj_consume_token(26);
        index = jj_consume_token(NUMBER);
        jj_consume_token(27);
offset = Integer.parseInt(index.image);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
Number left = dataSegment.getVariable(lhs.image, offset);
        if( left == null ) {
            if( !macroVariables.contains(lhs.image) ) {
                {if (true) throw new ParseException("Unknown variable " + lhs.image + " in line " + lhs.beginLine );}
            } else {
                left = new Number(0);
            }
        }
        {if ("" != null) return left;}
      break;
      }
    case NUMBER:{
      lhs = jj_consume_token(NUMBER);
{if ("" != null) return dataSegment.newVariable(Integer.parseInt(lhs.image));}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number IfCondition() throws ParseException {Number address;
    Token number;
    Token constant;
    address = Lhs();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEQ:{
      jj_consume_token(NEQ);
      number = jj_consume_token(NUMBER);
Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            {if ("" != null) return flag;}
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      number = jj_consume_token(NUMBER);
{if ("" != null) return address;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Number Variable() throws ParseException {Token id, index;
    int offset = 0;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      jj_consume_token(26);
      index = jj_consume_token(NUMBER);
      jj_consume_token(27);
offset = Integer.parseInt(index.image);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
Number val = dataSegment.getVariable(id.image, offset);
        if( val == null ) {
            if( !macroVariables.contains(id.image) ) {
                {if (true) throw new ParseException("Unknown variable " + id.image + " in line " + id.beginLine );}
            } else {
                val = new Number(0);
            }
        }
        {if ("" != null) return val;}
    throw new Error("Missing return statement in function");
}

  final public void Halt() throws ParseException {
    jj_consume_token(HALT);
codeSegment.add(Number.HALT);
}

  final public void Nop() throws ParseException {
    jj_consume_token(NOP);
codeSegment.add(Number.NOP);
}

  final public void Inc() throws ParseException {Number arg1;
    jj_consume_token(INC);
    arg1 = Variable();
codeSegment.addINC(arg1);
}

  final public void Dec() throws ParseException {Number arg1;
    jj_consume_token(DEC);
    arg1 = Variable();
codeSegment.addDEC(arg1);
}

  final public void Jnz() throws ParseException {Number arg1;
    Token arg2;
    jj_consume_token(JNZ);
    arg1 = Variable();
    arg2 = jj_consume_token(IDENTIFIER);
Number target = codeSegment.getLabel(arg2.image);
        codeSegment.addJNZ(arg1, target);
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_Variable_372_5_40()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_LabelDeclaration_137_5_7()) return true;
    return false;
  }

  private boolean jj_3R_StatementOrBlock_130_48_29()
 {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_WhileBlock_172_5_16()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_DoWhileBlock_160_5_15()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_Statement_207_50_24()
 {
    if (jj_3R_Macro_226_5_28()) return true;
    return false;
  }

  private boolean jj_3R_Block_153_5_14()
 {
    if (jj_scan_token(24)) return true;
    if (jj_3R_StatementsOrBlocks_125_5_19()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_148_7_13()
 {
    if (jj_3R_Statement_207_7_18()) return true;
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_147_7_12()
 {
    if (jj_3R_IfElseBlock_186_5_17()) return true;
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_146_7_11()
 {
    if (jj_3R_WhileBlock_172_5_16()) return true;
    return false;
  }

  private boolean jj_3R_LocalVariableDeclaration_243_5_26()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_145_7_10()
 {
    if (jj_3R_DoWhileBlock_160_5_15()) return true;
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_144_7_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnlabeledStatementOrBlock_144_7_9()) {
    jj_scanpos = xsp;
    if (jj_3R_UnlabeledStatementOrBlock_145_7_10()) {
    jj_scanpos = xsp;
    if (jj_3R_UnlabeledStatementOrBlock_146_7_11()) {
    jj_scanpos = xsp;
    if (jj_3R_UnlabeledStatementOrBlock_147_7_12()) {
    jj_scanpos = xsp;
    if (jj_3R_UnlabeledStatementOrBlock_148_7_13()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_UnlabeledStatementOrBlock_144_7_9()
 {
    if (jj_3R_Block_153_5_14()) return true;
    return false;
  }

  private boolean jj_3R_Statement_207_38_23()
 {
    if (jj_3R_Command_294_7_27()) return true;
    return false;
  }

  private boolean jj_3R_LabelDeclaration_137_5_7()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_Macro_226_5_28()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_UnlabeledStatementOrBlock_144_7_8()) return true;
    return false;
  }

  private boolean jj_3R_StatementOrBlock_130_5_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementOrBlock_130_48_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_StatementsOrBlocks_125_7_21()
 {
    if (jj_3R_StatementOrBlock_130_5_25()) return true;
    return false;
  }

  private boolean jj_3R_Jnz_411_5_39()
 {
    if (jj_scan_token(JNZ)) return true;
    if (jj_3R_Variable_372_5_40()) return true;
    return false;
  }

  private boolean jj_3R_StatementsOrBlocks_125_5_19()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_StatementsOrBlocks_125_7_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Dec_404_5_38()
 {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_Variable_372_5_40()) return true;
    return false;
  }

  private boolean jj_3R_Statement_207_9_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_207_9_22()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_207_38_23()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_207_50_24()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Statement_207_9_22()
 {
    if (jj_3R_LocalVariableDeclaration_243_5_26()) return true;
    return false;
  }

  private boolean jj_3R_Statement_207_7_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_207_9_20()) jj_scanpos = xsp;
    if (jj_scan_token(EOS)) return true;
    return false;
  }

  private boolean jj_3R_Inc_398_5_37()
 {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_Variable_372_5_40()) return true;
    return false;
  }

  private boolean jj_3R_Command_298_7_34()
 {
    if (jj_3R_Jnz_411_5_39()) return true;
    return false;
  }

  private boolean jj_3R_Command_297_7_33()
 {
    if (jj_3R_Dec_404_5_38()) return true;
    return false;
  }

  private boolean jj_3R_Command_296_7_32()
 {
    if (jj_3R_Inc_398_5_37()) return true;
    return false;
  }

  private boolean jj_3R_Command_295_7_31()
 {
    if (jj_3R_Nop_392_5_36()) return true;
    return false;
  }

  private boolean jj_3R_Nop_392_5_36()
 {
    if (jj_scan_token(NOP)) return true;
    return false;
  }

  private boolean jj_3R_Command_294_7_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Command_294_7_30()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_295_7_31()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_296_7_32()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_297_7_33()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_298_7_34()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Command_294_7_30()
 {
    if (jj_3R_Halt_387_5_35()) return true;
    return false;
  }

  private boolean jj_3R_Halt_387_5_35()
 {
    if (jj_scan_token(HALT)) return true;
    return false;
  }

  private boolean jj_3R_IfElseBlock_186_5_17()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CompilerParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000,0x400,0x4000000,0x4000000,0x60000,0x14277e0,0x20000,0x14277e0,0x8000,0x207e0,0x207e0,0x60000,0x60000,0x40000000,0x60000,0x4000000,0x60000,0x60000,0x40000000,0x4000000,0x60000,0x4000000,0x4000000,0x60000,0x3e0,0x180000,0x4000000,0x60000,0x180000,0x4000000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CompilerParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompilerParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompilerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CompilerParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompilerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompilerParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CompilerParser(CompilerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[31];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 31; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
