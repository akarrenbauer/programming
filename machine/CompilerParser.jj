options {
    STATIC = false;
}

PARSER_BEGIN(CompilerParser)

package machine;


import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;


public class CompilerParser {

    private List<Number> byteCode = new ArrayList<>();
    private CodeSegment codeSegment = new CodeSegment();
    private DataSegment dataSegment = new DataSegment();

    public static void main(String[] args) throws ParseException {
        CompilerParser parser = new CompilerParser(System.in);
        parser.Program();
    }
}

PARSER_END(CompilerParser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : {
    < HALT : "HALT" >
  | < NOP : "NOP" >
  | < INC : "INC" >
  | < DEC : "DEC" >
  | < JNZ : "JNZ" >
  | < DO : "do" >
  | < WHILE : "while" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < IDENTIFIER : ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
  | < NUMBER : ( ["0"-"9"] )+ >
  | < NEQ : "!=" >
  | < EQ : "==" >
  | < COLON : ":" >
  | < COMMENT : "//" ( ~["\n"] )* >
  | < EOL : "\n" >
}

List<Number> Program() : {
} {
    EntryPoint() ( Comment() )? <EOL>
    StatementsOrBlocks()
    <EOF> {
        byteCode.addAll(dataSegment);
        codeSegment.applyOffset( byteCode.size() );
        byteCode.addAll(codeSegment);
        return byteCode;
    }
}

void EntryPoint() : {
    Token id, num;
} {
      id = <IDENTIFIER> { dataSegment.add(codeSegment.newLabel(id.image)); }
    | num = <NUMBER> {
        dataSegment.add( new Number(num.image) );
    }
}

void Comment() : {
} {
    <COMMENT>
}

void StatementsOrBlocks() : {
} {
    ( LabeledStatementOrBlock() )*
}

void LabeledStatementOrBlock() : {
} {
    LOOKAHEAD(3)
      VariableDeclaration()
    | ( LabelDeclaration() )* StatementOrBlock()
}

void VariableDeclaration() : {
    Token id, rvalue;
} {
    LOOKAHEAD(3)
      id = <IDENTIFIER> <COLON> rvalue = <NUMBER> ( Comment() )? <EOL> {
          Number variable = dataSegment.newVariable(id.image, rvalue.image);
          codeSegment.addClear(variable);
          int value = Integer.parseInt(rvalue.image);
          for( int i = 0; i < value; ++i ) {
              codeSegment.addINC(variable);
          }
      }
    | id = <IDENTIFIER> <COLON> rvalue = <IDENTIFIER> ( Comment() )? <EOL> {
          Number left   = dataSegment.newVariable(id.image, 0);
          Number middle = dataSegment.newVariable(0);
          Number right  = dataSegment.getVariable(rvalue.image);
          codeSegment.addClear(left);
          codeSegment.addClear(middle);
          codeSegment.addINC(right);
          Number cloneLoop = codeSegment.newLabel();
          codeSegment.addINC(left);
          codeSegment.addINC(middle);
          codeSegment.addDEC(right);
          codeSegment.addJNZ(right, cloneLoop);
          codeSegment.addDEC(left);
          Number restoreLoop = codeSegment.newLabel();
          codeSegment.addINC(right);
          codeSegment.addDEC(middle);
          codeSegment.addJNZ(middle, restoreLoop);
          codeSegment.addDEC(right);
      }

}

void LabelDeclaration() : {
    Token label;
} {
    label = <IDENTIFIER> <COLON> {
        codeSegment.placeLabel(label.image);
    }
}

void StatementOrBlock() : {
} {
      Block()
    | DoWhileBlock()
    | WhileBlock()
    | IfElseBlock()
    | Statement()
}

void Block() : {
} {
    "{" StatementsOrBlocks() "}" ( Comment() )? <EOL>
}

void DoWhileBlock() : {
    Number condition;
    Number target = codeSegment.newLabel();
} {
    <DO> "{"
        StatementsOrBlocks()
    "}" <WHILE> "(" condition = DoWhileCondition() ")" ( Comment() )? <EOL> {
        codeSegment.addJNZ(condition, target);
    }
}

void WhileBlock() : {
    Number condition;
    Number begin = codeSegment.newLabel();
    Number end = codeSegment.newLabel();
} {
    <WHILE> "(" condition=IfCondition() ")" { codeSegment.addJNZ(condition, end); } "{"
        StatementsOrBlocks()
    "}" ( Comment() )? <EOL> {
        codeSegment.addJNZ(new Number(0), begin);
        codeSegment.placeLabel(end);
    }
}

void IfElseBlock() : {
    Number condition;
    Number elseLabel = codeSegment.newLabel();
    Number endLabel = codeSegment.newLabel();
} {
    <IF> "(" condition=IfCondition() ")" { codeSegment.addJNZ(condition, elseLabel); } "{"
        StatementsOrBlocks()
    "}" ( <ELSE> {
        codeSegment.addJNZ(new Number(0), endLabel);
        codeSegment.placeLabel(elseLabel);
    } "{"
        StatementsOrBlocks()
    "}" )? ( Comment() )? <EOL> {
        codeSegment.placeLabel(endLabel);
    }
}

void Statement() : {
} {
      ( Command() )? ( Comment() )? <EOL>
}

Number DoWhileCondition() : {
    Number address;
    Token number;
} {
    LOOKAHEAD(2)
      address = Lhs() <NEQ> number = <NUMBER> {
        int n = Integer.parseInt(number.image);
        if( n == 0 ) {
            return address;
        } else {
            return address;
        }
      }
    | address = Lhs() <EQ> number = <NUMBER> {
        Number target = codeSegment.newLabel();
        Number flag = dataSegment.newVariable(0);
        codeSegment.addClear(flag);
        codeSegment.addJNZ(address, target);
        codeSegment.addINC(flag);
        codeSegment.placeLabel(target);
        return flag;
      }
}

Number Lhs() : {
    Token lhs;
} {
      lhs = <IDENTIFIER> {
        return dataSegment.getVariable(lhs.image);
      }
    | lhs = <NUMBER> {
        return dataSegment.newVariable(Integer.parseInt(lhs.image));
    }
}

Number IfCondition() : {
    Number address;
    Token number;
    Token constant;
} {
    LOOKAHEAD(2)
      address = Lhs() <NEQ> number = <NUMBER> {
        Number target = codeSegment.newLabel();
        Number flag = dataSegment.newVariable(0);
        codeSegment.addClear(flag);
        codeSegment.addJNZ(address, target);
        codeSegment.addINC(flag);
        codeSegment.placeLabel(target);
        return flag;
      }
    | address = Lhs() <EQ> number = <NUMBER> {
        return address;
      }
}

void Command() : {
    Number arg1, arg2;
} {

      Halt()
    | Nop()
    | Inc()
    | Dec()
    | Jnz()
}


Number Variable() : {
    Token id;
} {
    id = <IDENTIFIER> {
        return dataSegment.getVariable(id.image);
    }
}

void Halt() : {
} {
    <HALT> { codeSegment.add(Number.HALT); }
}

void Nop() : {
} {
    <NOP> { codeSegment.add(Number.NOP); }
}

void Inc() : {
    Number arg1;
} {
    <INC> arg1 = Variable() { codeSegment.addINC(arg1); }
}

void Dec() : {
    Number arg1;
} {
    <DEC> arg1 = Variable() { codeSegment.addDEC(arg1); }
}

void Jnz() : {
    Number arg1;
    Token arg2;
} {
    <JNZ> arg1 = Variable() arg2 = <IDENTIFIER> {
        Number target = codeSegment.getLabel(arg2.image);
        codeSegment.addJNZ(arg1, target);
    }
}
