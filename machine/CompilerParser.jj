options {
    STATIC = false;
}

PARSER_BEGIN(CompilerParser)

package machine;


import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;


public class CompilerParser {

    private boolean preflight = false;

    private List<Number> byteCode = new ArrayList<>();
    private CodeSegment codeSegment = new CodeSegment();
    private DataSegment dataSegment = new DataSegment();

    public static void main(String[] args) throws ParseException {
        CompilerParser parser = new CompilerParser(System.in);
        parser.Program();
    }
}

PARSER_END(CompilerParser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}


TOKEN : {
    < HALT : "HALT" >
  | < NOP : "NOP" >
  | < INC : "INC" >
  | < DEC : "DEC" >
  | < JNZ : "JNZ" >
  | < VAR : "var" >
  | < ASSIGN : "=" >
  | < DO : "do" >
  | < WHILE : "while" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < VOID : "void" >
  | < IDENTIFIER : ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
  | < NUMBER : ( ["0"-"9"] )+ >
  | < NEQ : "!=" >
  | < EQ : "==" >
  | < COLON : ":" >
  | < EOS : ";" >
  | < BEGIN : "begin:" >
}

List<Number> Program( boolean preflight ) : {
} {
    {
        this.preflight = preflight;
        dataSegment.add(codeSegment.newLabel("begin"));
    }
    ( MacroDefinition() )*
    ( GlobalVariableDeclaration() <EOS> )*
    <BEGIN> {
        codeSegment.placeLabel("begin");
    }
    StatementsOrBlocks() 
    <EOF> {
        byteCode.addAll(dataSegment);
        codeSegment.applyOffset( byteCode.size() );
        byteCode.addAll(codeSegment);
        return byteCode;
    }
}

void MacroDefinition() : {
}{
    <VOID> Macro() "{"
            StatementsOrBlocks()
    "}"
}

void GlobalVariableDeclaration() : {
    Token id, rvalue, size, index;
    int length = 1;
    int offset = 0;
} {
    <VAR> id = <IDENTIFIER> ( "[" size = <NUMBER> "]" { length = Integer.parseInt(size.image); } )? <ASSIGN> (
          rvalue = <NUMBER> {
            Number variable = dataSegment.newVariable(id.image, length, rvalue.image);
        }
        | rvalue = <IDENTIFIER> ( "[" index = <NUMBER> "]" { offset = Integer.parseInt(index.image); } )? {
            Number right  = dataSegment.getVariable(rvalue.image, offset);
            Number variable = dataSegment.newVariable(id.image, length, right.getValue());
        }
    )
}


void StatementsOrBlocks() : {
} {    
    ( StatementOrBlock() )*
}

void StatementOrBlock() : {
} {
    LOOKAHEAD(2) UnlabeledStatementOrBlock() | ( LOOKAHEAD(2) LabelDeclaration() )+ UnlabeledStatementOrBlock()
}


void LabelDeclaration() : {
    Token label;
} {
    label = <IDENTIFIER> <COLON> {
        codeSegment.placeLabel(label.image);
    }
}

void UnlabeledStatementOrBlock() : {
} {
      Block()
    | DoWhileBlock()
    | WhileBlock()
    | IfElseBlock()
    | Statement()
}

void Block() : {
} {
    "{" StatementsOrBlocks() "}"
}

void DoWhileBlock() : {
    Number condition;
    Number target = codeSegment.newLabel();
} {
    <DO> "{"
        StatementsOrBlocks()
    "}" <WHILE> "(" condition = DoWhileCondition() ")" <EOS> {
        codeSegment.addJNZ(condition, target);
    }
}

void WhileBlock() : {
    Number condition;
    Number begin = codeSegment.newLabel();
    Number end = codeSegment.newLabel();
} {
    <WHILE> "(" condition=IfCondition() ")" { codeSegment.addJNZ(condition, end); } "{"
        StatementsOrBlocks()
    "}" {
        codeSegment.addJNZ(new Number(0), begin);
        codeSegment.placeLabel(end);
    }
}

void IfElseBlock() : {
    Number condition;
    Number elseLabel = codeSegment.newLabel();
    Number endLabel = codeSegment.newLabel();
    boolean hasElse = false;
} {
    <IF> "(" condition=IfCondition() ")" { codeSegment.addJNZ(condition, elseLabel); } "{"
        StatementsOrBlocks()
    "}" ( <ELSE> {
        codeSegment.addJNZ(new Number(0), endLabel);
        codeSegment.placeLabel(elseLabel);
        hasElse = true;
    } "{"
        StatementsOrBlocks()
    "}" )? {
        codeSegment.placeLabel(endLabel);
    }
    {
        if( !hasElse ) {
            codeSegment.placeLabel(elseLabel);
        }
    }

}

void Statement() : {
} {
      ( LocalVariableDeclaration() | Command() | Macro() )? <EOS>
}

void Macro() : {
}{
    <IDENTIFIER> "(" (<NUMBER> | <IDENTIFIER>)? ("," (<NUMBER> | <IDENTIFIER>) )* ")" {
        if( !preflight ) {
            throw new ParseException( "Macro substitution failed!");
        }
    }
}

void LocalVariableDeclaration() : {
    Token id, rvalue, size, index;
    int length = 1;
    int offset = 0;
} {
    <VAR> id = <IDENTIFIER> ( "[" size = <NUMBER> "]" { length = Integer.parseInt(size.image); } )? <ASSIGN> (
          rvalue = <NUMBER> {
            Number base = dataSegment.newVariable(id.image, length, rvalue.image);
            int value = Integer.parseInt(rvalue.image);
            for( int j = 0; j < length; ++j ) {
                Number variable = base.offset(j);
                codeSegment.addClear(variable);
                for( int i = 0; i < value; ++i ) {
                    codeSegment.addINC(variable);
                }
            }
        }
        | rvalue = <IDENTIFIER> ( "[" index = <NUMBER> "]" { offset = Integer.parseInt(index.image); } )? {
            Number left   = dataSegment.newVariable(id.image, length, 0);
            Number middle = dataSegment.newVariable(0);
            Number right  = dataSegment.getVariable(rvalue.image, offset);
            for( int j = 0; j < length; ++j ) {
                codeSegment.addClear(left.offset(j));
                codeSegment.addClear(middle);
                codeSegment.addINC(right);
                Number cloneLoop = codeSegment.newLabel();
                codeSegment.addINC(left.offset(j));
                codeSegment.addINC(middle);
                codeSegment.addDEC(right);
                codeSegment.addJNZ(right, cloneLoop);
                codeSegment.addDEC(left.offset(j));
                Number restoreLoop = codeSegment.newLabel();
                codeSegment.addINC(right);
                codeSegment.addDEC(middle);
                codeSegment.addJNZ(middle, restoreLoop);
                codeSegment.addDEC(right);
            }
        }
    )
}

void Command() : {
    Number arg1, arg2;
} {

      Halt()
    | Nop()
    | Inc()
    | Dec()
    | Jnz()
}

Number DoWhileCondition() : {
    Number address;
    Token number;
} {
    address = Lhs() (
        <NEQ> number = <NUMBER> {
            int n = Integer.parseInt(number.image);
            if( n == 0 ) {
                return address;
            } else {
                return address;
            }
        }
        | <EQ> number = <NUMBER> {
            Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            return flag;
        }
    )
}

Number Lhs() : {
    Token lhs, index;
    int offset = 0;
} {
      lhs = <IDENTIFIER> ( "[" index = <NUMBER> "]" { offset = Integer.parseInt(index.image); } )? {
        return dataSegment.getVariable(lhs.image, offset);
      }
    | lhs = <NUMBER> {
        return dataSegment.newVariable(Integer.parseInt(lhs.image));
    }
}

Number IfCondition() : {
    Number address;
    Token number;
    Token constant;
} {
      address = Lhs() (
          <NEQ> number = <NUMBER> {
            Number target = codeSegment.newLabel();
            Number flag = dataSegment.newVariable(0);
            codeSegment.addClear(flag);
            codeSegment.addJNZ(address, target);
            codeSegment.addINC(flag);
            codeSegment.placeLabel(target);
            return flag;
        }
        | <EQ> number = <NUMBER> {
            return address;
        }
    )
}


Number Variable() : {
    Token id, index;
    int offset = 0;
} {
    id = <IDENTIFIER> ( "[" index = <NUMBER> "]" { offset = Integer.parseInt(index.image); } )? {
        return dataSegment.getVariable(id.image, offset);
    }
}

void Halt() : {
} {
    <HALT> { codeSegment.add(Number.HALT); }
}

void Nop() : {
} {
    <NOP> { codeSegment.add(Number.NOP); }
}

void Inc() : {
    Number arg1;
} {
    <INC> arg1 = Variable() { codeSegment.addINC(arg1); }
}

void Dec() : {
    Number arg1;
} {
    <DEC> arg1 = Variable() { codeSegment.addDEC(arg1); }
}

void Jnz() : {
    Number arg1;
    Token arg2;
} {
    <JNZ> arg1 = Variable() arg2 = <IDENTIFIER> {
        Number target = codeSegment.getLabel(arg2.image);
        codeSegment.addJNZ(arg1, target);
    }
}
